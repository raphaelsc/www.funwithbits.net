<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fun With Bits]]></title>
  <link href="http://funwithbits.net/atom.xml" rel="self"/>
  <link href="http://funwithbits.net/"/>
  <updated>2017-02-05T04:32:18-02:00</updated>
  <id>http://funwithbits.net/</id>
  <author>
    <name><![CDATA[Raphael S. Carvalho (a.k.a. utroz)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling Game States]]></title>
    <link href="http://funwithbits.net/blog/handling-game-states/"/>
    <updated>2017-01-28T22:52:39-02:00</updated>
    <id>http://funwithbits.net/blog/handling-game-states</id>
    <content type="html"><![CDATA[<p><em>Prerequisite</em>: basic C++ and game programming knowledge</p>

<p>When you start any game, you expect to see a loading screen, followed by the
main menu which has a button that allows you to play the game. When you start
playing the game, it&rsquo;s also expected that you&rsquo;ll be able to go back to main
menu and possibly pause and resume the game. All these different stages of the
game are known as game states.</p>

<p>Handling game states is a very difficult task, especially to newbies to game
programming like myself. Today, I was looking for an efficient way to switch
back and forth between all available states of my simple game.</p>

<p>The simplest way to do it would be using a switch statement, as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">enum</span> <span class="n">game_states</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MENU</span><span class="p">,</span>
</span><span class='line'>    <span class="n">GAME</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">game</span><span class="o">::</span><span class="n">update</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">_current_game_state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MENU</span><span class="p">:</span>
</span><span class='line'>            <span class="c1">// show game options</span>
</span><span class='line'>            <span class="c1">// update current state to PLAY if user clicks on play button.</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">PLAY</span><span class="p">:</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s indeed very simple, but it would be a nightmare to maintain this code
when the number of states increases considerably. It turned out that a
<a href="http://en.wikipedia.org/wiki/Finite-state_machine">Finite State Machine (FSM)</a>
is exactly what I was looking for. It&rsquo;s said that FSM is an abstract machine
that can be in exactly one of a finite number of states at any given time.</p>

<p>To implement a state machine that handle different types of game states, I took
advantage of polymorphism. Each game state will derive from an abstract class
called game_state; follow its definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">game_state</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">on_enter</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">on_exit</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first two methods will be used for loading and cleaning the game state,
respectively. <strong>game_state::update()</strong> will be used for a given state to react
to user&rsquo;s input and possibly switch to another state. For example, when an user
clicks on play button, the state machine will switch from menu to play state.</p>

<p>Now our state machine will be able to work with all different types of game
states in the same way. To make the transition between stages more efficient,
the machine will work in the same way a stack does. For example, a new state
will be pushed to the back of container storing the game states. And more
importantly, the active state is the one that was last pushed to the container.
That&rsquo;s how my implementation of game state machine turned out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">game_state_machine</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">game_state</span><span class="o">&gt;&gt;</span> <span class="n">_game_states</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">push</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">game_state</span><span class="o">&gt;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="o">-&gt;</span><span class="n">on_enter</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_game_states</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">state</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">pop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_game_states</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_game_states</span><span class="p">.</span><span class="n">back</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">on_exit</span><span class="p">();</span>
</span><span class='line'>            <span class="n">_game_states</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">_game_states</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_game_states</span><span class="p">.</span><span class="n">back</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <strong>game_state_machine::update()</strong> will only call update on behalf of
the active state, and that&rsquo;s essential for the machine to work as expected.</p>

<p>I showed the implementation of abstract class for game state, but it&rsquo;s also
important to understand how an actual game state could be implemented by
deriving from it. Check it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">menu</span> <span class="o">:</span> <span class="k">public</span> <span class="n">game_state</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">on_enter</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// load menu sprites</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">on_exit</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// clean up goes here</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">update</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// if user clicked on play button, switch to play state.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>            <span class="n">game_state_machine</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">play</span><span class="o">&gt;</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very easy, no?! If we&rsquo;re in play state, and want to go back to menu, all we
need to do is to call <strong>game_state_machine::pop()</strong>.</p>

<p>This was the most efficient way I found to handle game states in my own game.
If you know a better way to do it, please leave a comment!</p>

<p><strong>PS</strong>: the comment section only shows up when you click on the blog post&rsquo;s
title.</p>

<p>See you,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ready to Have Fun With Bits?!]]></title>
    <link href="http://funwithbits.net/blog/hello-world/"/>
    <updated>2017-01-21T18:07:34-02:00</updated>
    <id>http://funwithbits.net/blog/hello-world</id>
    <content type="html"><![CDATA[<p>Hi everyone. I&rsquo;m really glad that I finally launched this blog. Fun With Bits.</p>

<p>Special thanks goes to <a href="http://catonmat.net">Peteris Krumins</a> who shared some
invaluable insights about blogging.</p>

<p>TL;DR: Bla bla bla about who I am. In this blog, I&rsquo;ll talk about software
development techniques, low-level hacks, game development, kernel, among other
interesting topics I feel it&rsquo;s worth sharing with my readers.</p>

<p>I don&rsquo;t expect people to know me prior to reading my blog, so I&rsquo;m going to
introduce myself.</p>

<p>I think that my father (unfortunately, he&rsquo;s no longer around us) is the main
reason behind my interest in computers. When I was about 10 years old, he
taught me how to use commands to interact with MS DOS. I remember the most
important commands were to edit texts, execute programs, and navigate through
the file system. I don&rsquo;t know how many times I messed up with the operating
system, making impossible to boot it. I had a lot of fun doing it though.
After that, I was able to create my own websites using HTML and CSS. I didn&rsquo;t
even know what programming actually was at that time. I was just curious and
wanted to do interesting things with my computer.</p>

<p>I actually started with programming after I got interested in creating my own
alternative server for a MMORPG called Tibia. Of course, I didn&rsquo;t create the
server, but the experience made me learn how to host a server, manage my
website and consequently a database which stored players' data, and also
how to write scripts using LUA programming language for custom systems,
like quests and spells.</p>

<p>At that time, I wasn&rsquo;t even thinking of computer science as a career. I was
just having fun with bits. Pun intended :-)
But I changed my mind and joined a local university for a computer science
degree. It helped me a lot because I wanted to be the best programmer among
my peers. I worked really hard. A friend of mine a.k.a. kov introduced me to
the open source world. He told me about the job opportunities I could get if
I started helping relevant open source projects out there. IIRC, Linux kernel
was the first open source project I contributed to. The change was to slightly
improve the PID allocation code. I will not lie. It was extremely hard to find
something to do, but the experience taught me a lot. I was really obsessed
with kernel. I often found myself whispering the word &lsquo;kernel&rsquo; while showing or
walking down the streets. I wanted to better understand how computers worked,
from boot to application initialization.</p>

<p>As I was gaining more experience, I contributed to other projects until I got
my first job opportunity at an israeli startup called Cloudius Systems.
It was working on creation of a project called <a href="http://osv.io">OSv</a>. In OSv, I
worked with file systems. Mostly on improving ZFS support. I&rsquo;m working for the
same company, but now on creation of a distributed database called
<a href="http://scylladb.com">ScyllaDB</a>.</p>

<p>I think I&rsquo;m considerably better than myself of 5 years ago, but there&rsquo;s a long
way to go until I can say I&rsquo;m really good with computers.
By the time being, I&rsquo;ll keep repeating this ZEN poem to myself:
“To follow the path, look to the master, follow the master, walk with the
master, see through the master, become the master.”</p>

<p>I&rsquo;ll do my best to share interesting stuff with all of you.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
</feed>
